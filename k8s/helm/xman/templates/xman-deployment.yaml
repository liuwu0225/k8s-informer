{{- if (not .Values.ide.enabled) }}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: xman-deployment
  labels:
    app.kubernetes.io/name: xman-app
    app.kubernetes.io/instance: xman-app
    app.kubernetes.io/managed-by: xman
    app: xman-app
    version: v1
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: xman-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: xman-app
        app.kubernetes.io/instance: xman-app
        app.kubernetes.io/managed-by: xman
        app: xman-app
    spec:
      containers:
      - name: xman-app
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}" 
        ports:
        - name: http-xman-port
          containerPort: 3000
          protocol: TCP
        - name: https-xman-port
          containerPort: 3002
          protocol: TCP
        {{- if .Values.xman_app }}
          {{- if .Values.xman_app.debug }}
        - name: tcp-xman-debug-port
          containerPort: 5335
          protocol: TCP
          {{- end }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: xman-app-config
        env:
          - name: CERT_PEM
            valueFrom:
              secretKeyRef:
                name: perf-sidecar-injector-webhook-certs
                key: cert.pem
          - name: KEY_PEM
            valueFrom:
              secretKeyRef:
                name: perf-sidecar-injector-webhook-certs
                key: key.pem
        {{- if (or (eq .Values.serviceCatalog.provider "azure") (not .Values.serviceCatalog.enabled)) }}
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: host
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: port                   
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: database                     
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: password 
          - name: DB_SSL_REQUIRED
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: sslRequired             
        {{- else if (eq .Values.serviceCatalog.provider "aws") }} 
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: ENDPOINT_ADDRESS
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: PORT                   
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: DB_NAME                     
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: MASTER_USERNAME
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: xman-pg-secret
                key: MASTER_PASSWORD
          - name: DB_SSL_REQUIRED
            value: "true"
        {{- end }}
        resources: {}
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: File
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/healthcheck
            port: http-xman-port
          initialDelaySeconds: 5
          failureThreshold: 3
          timeoutSeconds: 2
          periodSeconds: 12
        readinessProbe:
          httpGet:
            path: /api/healthcheck
            port: http-xman-port
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 5
          periodSeconds: 12
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      {{- if .Values.secret }}
      {{- if .Values.secret.dockerconfigjson }}
      imagePullSecrets:
        - name: regcred
      {{- end }}
      {{- end }}
      serviceAccount: xman-operator
      serviceAccountName: xman-operator
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
  {{- end }}
