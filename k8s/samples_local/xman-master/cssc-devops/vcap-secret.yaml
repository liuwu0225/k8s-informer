apiVersion: v1
data:
  content.json: {
  "uaa": [
    {
      "label": "xsuaa",
      "provider": null,
      "plan": "broker",
      "name": "bcuaa",
      "tags": [
        "xsuaa"
      ],
      "instance_name": "bcuaa",
      "binding_name": null,
      "credentials": {
        "apiurl": "https://api.authentication.eu20.hana.ondemand.com",
        "clientid": "sb-bc-admin-cssc-devops-xman-master-eu-az!b712",
        "clientsecret": "vN3/BKnQJyCpVruilaY3jnXvuXE=",
        "identityzone": "admincsscdevopsxmanmastereuaz",
        "identityzoneid": "da5e54bb-e076-455f-8bf1-71980ca39da8",
        "sburl": "https://internal-xsuaa.authentication.eu20.hana.ondemand.com",
        "tenantid": "da5e54bb-e076-455f-8bf1-71980ca39da8",
        "tenantmode": "shared",
        "trustedclientidsuffix": "|bc-admin-cssc-devops-xman-master-eu-az!b712",
        "uaadomain": "authentication.eu20.hana.ondemand.com",
        "url": "https://admincsscdevopsxmanmastereuaz.authentication.eu20.hana.ondemand.com",
        "verificationkey": "-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5KFUmRhA+4bqpKTkJZAkEjg2LJh5ucqVaJPLQpou+cfN5u/Zx9yk3lw4N3v6CTTPY+Bw3A9LTts/Dw+WTtGf9qKu9Ia6ytjsI3GCvf+E2DLC7f6MwAIFuAPL+FPsrqWwAfB9COJhgqD0chudK2tJh8cBL9hcyV5a06G90Avi16H14DIKedwsdm8gHK3vmd0EeyPz1CAZTwG4DV1ZyA8hNXnrYJ5jbljaAPzKKZ03FptTI6/hNZ0LLRUn1cCff9XT5N+wKox0PcT5AqdUhmpMUsQinwUDyaGQr+XpRyQE95hcyKU1cVwyTOwOyjrqcSE8SviUYS/h2pAO5SS+oyFDYwIDAQAB-----END PUBLIC KEY-----",
        "xsappname": "bc-admin-cssc-devops-xman-master-eu-az!b712"
      },
      "syslog_drain_url": null,
      "volume_mounts": []
    }
  ],
  "saas-registry": [
    {
      "label": "saas-registry",
      "provider": null,
      "plan": "application",
      "name": "consumer-saas-registry",
      "tags": [
        "SaaS"
      ],
      "instance_name": "consumer-saas-registry",
      "binding_name": null,
      "credentials": {
        "apiurl": "https://api.authentication.eu20.hana.ondemand.com",
        "appName": "businessconfiguration-admin-cssc-devops-xman-master-eu-az",
        "appUrls": "{\"getDependencies\":\"https://admincsscdevopsxmanmastereuaz.cssc-devops.xman.eu.one.cloud.sap/callback/v1.0/dependencies\",\"onSubscription\":\"https://admincsscdevopsxmanmastereuaz.cssc-devops.xman.eu.one.cloud.sap/sap/svc/subscription/api/cssc-devops:x4-app/tenant/{tenantId}\",\"onSubscriptionAsync\":false,\"onUnSubscriptionAsync\":false,\"callbackTimeoutMillis\":0}",
        "clientid": "sb-businessconfiguration-admin-cssc-devops-xman-master-eu-az-clone!b712|lps-registry-broker!b3",
        "clientsecret": "mbcv9PrhmB+qdqrM4JjSuWXYnNE=",
        "description": "Central Business Configuration Application",
        "display_name": "Central Business Configuration",
        "identityzone": "admincsscdevopsxmanmastereuaz",
        "identityzoneid": "da5e54bb-e076-455f-8bf1-71980ca39da8",
        "saas_registry_url": "https://saas-manager.cfapps.eu20.hana.ondemand.com",
        "sburl": "https://internal-xsuaa.authentication.eu20.hana.ondemand.com",
        "tenant_onboarding_url": "https://saas-manager.cfapps.eu20.hana.ondemand.com",
        "tenantid": "da5e54bb-e076-455f-8bf1-71980ca39da8",
        "tenantmode": "dedicated",
        "uaadomain": "authentication.eu20.hana.ondemand.com",
        "url": "https://admincsscdevopsxmanmastereuaz.authentication.eu20.hana.ondemand.com",
        "verificationkey": "-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5KFUmRhA+4bqpKTkJZAkEjg2LJh5ucqVaJPLQpou+cfN5u/Zx9yk3lw4N3v6CTTPY+Bw3A9LTts/Dw+WTtGf9qKu9Ia6ytjsI3GCvf+E2DLC7f6MwAIFuAPL+FPsrqWwAfB9COJhgqD0chudK2tJh8cBL9hcyV5a06G90Avi16H14DIKedwsdm8gHK3vmd0EeyPz1CAZTwG4DV1ZyA8hNXnrYJ5jbljaAPzKKZ03FptTI6/hNZ0LLRUn1cCff9XT5N+wKox0PcT5AqdUhmpMUsQinwUDyaGQr+XpRyQE95hcyKU1cVwyTOwOyjrqcSE8SviUYS/h2pAO5SS+oyFDYwIDAQAB-----END PUBLIC KEY-----",
        "xsappname": "bc-admin-cssc-devops-xman-master-eu-az"
      },
      "syslog_drain_url": null,
      "volume_mounts": []
    }
  ],
  "certificateservice": [
    {
      "credentials": {
        "uaa": {
          "apiurl": "https://api.authentication.eu10.hana.ondemand.com",
          "clientid": "sb-a4ac3bc5-4351-4cf7-a8f2-b7d1e499d142!b35084|certservice!b1941",
          "clientsecret": "k+RdBtL6hxI42LLqr7ths7u+sTY=",
          "identityzone": "cbccertificateservice",
          "identityzoneid": "225de613-bee1-47e2-a728-f7ac2fa26223",
          "sburl": "https://internal-xsuaa.authentication.eu10.hana.ondemand.com",
          "tenantid": "225de613-bee1-47e2-a728-f7ac2fa26223",
          "tenantmode": "dedicated",
          "uaadomain": "authentication.eu10.hana.ondemand.com",
          "url": "https://cbccertificateservice.authentication.eu10.hana.ondemand.com",
          "verificationkey": "-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwThn6OO9kj0bchkOGkqYBnV1dQ3zU/xtj7Kj7nDd8nyRMcEWCtVzrzjzhiisRhlrzlRIEY82wRAZNGKMnw7cvCwNixcfcDJnjzgr2pJ+5/yDZUc0IXXyIWPZD+XdL+0EogC3d4+fqyvg/BF/F0t2hKHWr/UTXE6zrGhBKaL0d8rKfYd6olGWigFd+3+24CKI14zWVxUBtC+P9Fhngc9DRzkXqhxOK/EKn0HzSgotf5duq6Tmk9DCNM4sLW4+ERc6xzrgbeEexakabvax/Az9WZ4qhwgw+fwIhKIC7WLwCEJaRsW4m7NKkv+eJR2LKYesuQ9SVAJ3EXV86RwdnH4uAv7lQHsKURPVAQBlranSqyQu0EXs2N9OlWTxe+FyNkIvyZvoLrZl/CdlYc8AKxRm5rn2/88nkrYQ0XZSrnICM5FRWgVF2hn5KfZGwtBN85/D4Yck6B3ocMfyX7e4URUm9lRPQFUJGTXaZnEIge0R159HUwhTN1HvyXrs6uT1ZZmW+c3p47dw1+LmUf/hIf8zd+uvHQjIeHEJqxjqfyA8yqAFKRHKVFrwnwdMHIsRap2EKBhHMfeVf0P2th5C9MggYoGCvdIaIUgMBX3TtCdvGrcWML7hnyS2zkrlA8SoKJnRcRF2KxWKs355FhpHpzqyZflO5l98+O8wOsFjGpL9d0ECAwEAAQ==-----END PUBLIC KEY-----",
          "xsappname": "a4ac3bc5-4351-4cf7-a8f2-b7d1e499d142!b35084|certservice!b1941"
        }
      },
      "instance_name": "certificateinstance",
      "name": "certificateservice",
      "profileurl": "https://certservice.cfapps.eu10.hana.ondemand.com/certservice/v2/enroll/standard"
    }
  ],
  "destination": [
    {
      "label": "destination",
      "provider": null,
      "plan": "lite",
      "name": "destination",
      "tags": [
        "destination",
        "conn",
        "connsvc"
      ],
      "instance_name": "bcdestination",
      "binding_name": null,
      "credentials": {
        "clientid": "sb-clone3a02f3b85ea14b3d90bd650038c8c183!b712|destination-xsappname!b2",
        "clientsecret": "7fGERAtuYt01feQA3ndXPNWIzvE=",
        "identityzone": "admincsscdevopsxmanmastereuaz",
        "instanceid": "3a02f3b8-5ea1-4b3d-90bd-650038c8c183",
        "tenantid": "da5e54bb-e076-455f-8bf1-71980ca39da8",
        "tenantmode": "dedicated",
        "uaadomain": "authentication.eu20.hana.ondemand.com",
        "uri": "https://destination-configuration.cfapps.eu20.hana.ondemand.com",
        "url": "https://admincsscdevopsxmanmastereuaz.authentication.eu20.hana.ondemand.com",
        "verificationkey": "-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5KFUmRhA+4bqpKTkJZAkEjg2LJh5ucqVaJPLQpou+cfN5u/Zx9yk3lw4N3v6CTTPY+Bw3A9LTts/Dw+WTtGf9qKu9Ia6ytjsI3GCvf+E2DLC7f6MwAIFuAPL+FPsrqWwAfB9COJhgqD0chudK2tJh8cBL9hcyV5a06G90Avi16H14DIKedwsdm8gHK3vmd0EeyPz1CAZTwG4DV1ZyA8hNXnrYJ5jbljaAPzKKZ03FptTI6/hNZ0LLRUn1cCff9XT5N+wKox0PcT5AqdUhmpMUsQinwUDyaGQr+XpRyQE95hcyKU1cVwyTOwOyjrqcSE8SviUYS/h2pAO5SS+oyFDYwIDAQAB-----END PUBLIC KEY-----",
        "xsappname": "clone3a02f3b85ea14b3d90bd650038c8c183!b712|destination-xsappname!b2"
      }
    }
  ],
  "auditlog": [
    {
      "label": "auditlog",
      "provider": null,
      "plan": "standard",
      "name": "auditlog",
      "tags": [
        "auditlog"
      ],
      "instance_name": "bcauditlog",
      "binding_name": null,
      "credentials": {
        "password": "bf9e68fca1897365",
        "url": "https://api.auditlog.cf.eu20.hana.ondemand.com:8081",
        "user": "d22fc9cf2ed4bd5a",
        "vendor": "SAP"
      }
    }
  ]
}

kind: Secret
metadata:
  name: vcap-secret
type: Opaque
